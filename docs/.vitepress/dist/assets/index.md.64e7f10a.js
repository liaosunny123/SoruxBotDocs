import{_ as e,c as r,o as l,a}from"./app.2f47e0cf.js";const _=JSON.parse('{"title":"Hello, SoruxBot!","description":"","frontmatter":{},"headers":[{"level":2,"title":"快速了解","slug":"快速了解","link":"#快速了解","children":[]},{"level":2,"title":"体系构成","slug":"体系构成","link":"#体系构成","children":[{"level":3,"title":"框架本体","slug":"框架本体","link":"#框架本体","children":[]},{"level":3,"title":"协议层适配器","slug":"协议层适配器","link":"#协议层适配器","children":[]},{"level":3,"title":"插件","slug":"插件","link":"#插件","children":[]}]}],"relativePath":"index.md"}'),i={name:"index.md"},o=a('<h1 id="hello-soruxbot" tabindex="-1">Hello, SoruxBot! <a class="header-anchor" href="#hello-soruxbot" aria-hidden="true">#</a></h1><p>你好，欢迎来到 SoruxBot 框架的文档网站，在这里你会对 SoruxBot 的框架开发和插件开发有一个基本的了解！</p><p>SoruxBot 是一个支持多语言接入的、可跨平台运行的且可以实现一次开发多处运行的多聊天平台机器人框架，你可以在任意的聊天平台，甚至是Shell接入SoruxBot.</p><h2 id="快速了解" tabindex="-1">快速了解 <a class="header-anchor" href="#快速了解" aria-hidden="true">#</a></h2><ul><li>体系构成概述：见下方</li><li>接入SoruxBot插件：</li><li>接入SoruxBot 框架：</li><li>接入SoruxBot 协议层适配器：</li><li>接入SoruxBot 协议层实体：</li></ul><h2 id="体系构成" tabindex="-1">体系构成 <a class="header-anchor" href="#体系构成" aria-hidden="true">#</a></h2><p>在 SoruxBot 的体系内，分为四个部分：</p><ul><li>框架本体：负责SoruxBot的运行和插件的调度等等环节</li><li>协议层适配器：负责与SoruxBot进行通信，在通用适配模块和特定聊天平台间实现转换</li><li>协议层实体：负责与聊天平台进行通信，并且和协议层适配器进行沟通</li><li>插件：负责对某一特定事件进行处理或进行泛处理</li></ul><h3 id="框架本体" tabindex="-1">框架本体 <a class="header-anchor" href="#框架本体" aria-hidden="true">#</a></h3><p>在 SoruxBot 框架内，分为三个部分：</p><ul><li>Core.Kernel：为框架的主体，其性质属于类库，可以被包装器所构建</li><li>Core.Wrapper：为框架的内置包装器，负责组装Kernel以建立机器人实例</li><li>Core.Interface：为Kernel所支持的接口</li></ul><h4 id="core-kernel" tabindex="-1">Core.Kernel <a class="header-anchor" href="#core-kernel" aria-hidden="true">#</a></h4><p>SoruxBot 采用管道通信的模型，与外界的通信采用“入栈”，“出栈”和“特连”的概念。</p><ul><li>入栈：接收外界的信息，并且放入Kernel的消息管道</li><li>出栈：推送内部信息，并且放入Kernel的通信管道，但是这种方式会主动舍弃对于信息的状态跟踪</li><li>特接：推送内部的信息，但是直接与协议层实体进行沟通，并且通过内置的异步或同步的两种API获取返回值 Kernel 中有多个内部库，并提供给 Wrapper 进行选择性组装，这意味着你可以实现自己的Wrapper 来动态构建一个不需要管道等微型机器人。 此外，Kernel支持动态组件的替换，这意味着你可以根据Kernel内置的接口开发你自己的Kernel组件。Kernel为了避免对外部程序的依赖，因此内置组件均是基于C#内部库或者是部分NuGet开发，例如你可以根据自己的需求将管道换成Redis版本等。</li></ul><h4 id="core-wrapper" tabindex="-1">Core.Wrapper <a class="header-anchor" href="#core-wrapper" aria-hidden="true">#</a></h4><p>Kernel 的包装库，在SoruxBot内提供了一个内置的Wrapper，其采用了Kernel的全部库并构建出了一个大型的框架模型。 在Wrapper中，负责对Kernel和外界的沟通，同时，你可以在此处无侵入性的增加你的中间件服务，以实现对消息的过滤，对数据的统计，对路由的追踪等等。</p><h4 id="core-interface" tabindex="-1">Core.Interface <a class="header-anchor" href="#core-interface" aria-hidden="true">#</a></h4><p>Kernel的开发协议库，负责插件作者使用。 Interface是为插件作者服务的，其中提供了基本的数据模型，交互模型和API，同时提供组装自定义API请求的帮助类库，实现插件脱离Kernel开发。 注：若要开发Kernel类库，请使用Kernel中的Interface接口，而不是此处的Interface</p><h3 id="协议层适配器" tabindex="-1">协议层适配器 <a class="header-anchor" href="#协议层适配器" aria-hidden="true">#</a></h3><p>协议层适配器负责：</p><ul><li>接受协议层实体的上报，并组装成通用模型给Wrapper</li><li>接受框架的请求推送，并组装成特定模型给协议层实体 在部分语境下，若协议层实体支持SoruxBot协议或OneBot协议，那么可以忽略此层。</li></ul><h3 id="插件" tabindex="-1">插件 <a class="header-anchor" href="#插件" aria-hidden="true">#</a></h3><p>插件负责对于消息进行处理，并向框架发送请求信息。 插件由一下构成：</p><ul><li>Controller：插件内自定义的控制器类</li><li>Register：插件注册类 其中Controller只需要继承Interface的BotController即可，实际上，在框架内部看来插件的基本构成是Controller的Action而不是Controller，因此你最大程度的自定义你的Controller</li></ul>',24),t=[o];function n(h,d,c,u,s,p){return l(),r("div",null,t)}const f=e(i,[["render",n]]);export{_ as __pageData,f as default};
