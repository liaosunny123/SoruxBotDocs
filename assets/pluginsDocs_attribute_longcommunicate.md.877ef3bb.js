import{_ as s,c as a,o as l,a as e}from"./app.a5da328c.js";const y=JSON.parse('{"title":"LongCommunicate 特性","description":"","frontmatter":{},"headers":[{"level":2,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":2,"title":"API","slug":"api","link":"#api","children":[{"level":3,"title":"泛型API","slug":"泛型api","link":"#泛型api","children":[]}]}],"relativePath":"pluginsDocs/attribute/longcommunicate.md"}'),o={name:"pluginsDocs/attribute/longcommunicate.md"},n=e(`<h1 id="longcommunicate-特性" tabindex="-1">LongCommunicate 特性 <a class="header-anchor" href="#longcommunicate-特性" aria-hidden="true">#</a></h1><p>长对话模块的用处在于讲多个对话之间封装为简答的逻辑暴露给开发者。</p><p>在我们实际开发中可能会有一句话无法表达的场景，可能会有引导式收集用户输入的场景，这个时候你可以使用长对话模块。</p><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-hidden="true">#</a></h2><p>每一个MessageContext包含了一个状态，长对话模块会人为捕获某一个状态输入给指定的插件。</p><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-hidden="true">#</a></h2><ul><li><code>Controller</code>初始化的时候，在构造函数中填写<code>ILongMessageCommunicate</code>类型的参数，作为构造参数，并自己保存为本地的类变量。</li></ul><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h2><p>根据<code>SoruxBot</code>的开发逻辑，API分为泛型API和通用API。</p><h3 id="泛型api" tabindex="-1">泛型API <a class="header-anchor" href="#泛型api" aria-hidden="true">#</a></h3><div class="language-csharp"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Task</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MessageContext</span><span style="color:#89DDFF;">?&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CreateGenericListenerAsync</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">EventType</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">eventType</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">string?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">targetPlatform</span><span style="color:#89DDFF;">,string?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">targetAction</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Func</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MessageContext</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">action</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">isIntercept</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PluginFucFlag</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">flag</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">int?</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">timeOut</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span></code></pre></div><ul><li>EventType：表示事件类型，即触发的五大事件中的一种</li><li>targerPlatform：表示触发的平台类型，可为空</li><li>targetAction：表示触发的动作类型，可为空</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果对这三个参数不了解，请前往Command特性页查看相关逻辑。</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>最佳实践：建议三个参数都填写，或填写至少前两个参数。但是根据实际开发要求，插件往往只需要对某一个特定的状态（三个参数都确定的情况）下进行唯一监听</p></div><ul><li>action：一个委托，表示该消息是否为需要监听的对象</li><li>isIntercept：是否拦截，表示的是监听器是否消耗消息。</li><li>flag：表示处理后返回结果。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在框架中可能有多个插件，暂且即为A，B，C。此时A开始对用户下一条信息进行监听，B插件会捕获用户的每一个语句。 在框架中的调用顺序为：权限&gt;长对话&gt;普通插件调用 因此，在长对话被解析后，用户可以自行选择是否允许其他监听器/插件对该消息做出反应。 如果为拦截，那么消息立即被框架消耗，不被使用。 如果不拦截，那么消息继续被所有监听器处理（或在下一个监听器选择拦截后被消耗）。此时，监听器可以给消息一个Flag，表示消息的状态。因为每一个消息进入了插件被处理，必须更新相应的Flag。(如果将Flag设置为拦截，那么消息只会被监听器所读取，而不会被任何插件读取。)</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在<code>不拦截+flag拦截</code>的情况下中会出现某个监听器意外的对flag已经设置为<code>拦截</code>的消息进行覆写为其他flag类型，这被称为<code>脏设置</code>。 这是由于监听器不受<code>flag</code>的影响。 因此我们在将flag标记为拦截之前，需要检查一下是否为消息是否已经为拦截状态，从而确定flag是否能随意设置</p></div><ul><li>timeOut：最大等待时间。超过这个时间后监听器将被自动释放，单位为秒。</li></ul>`,18),t=[n];function p(c,i,r,d,F,C){return l(),a("div",null,t)}const D=s(o,[["render",p]]);export{y as __pageData,D as default};
