import{_ as s,c as a,o,a as n}from"./app.a5da328c.js";const u=JSON.parse('{"title":"使用SoruxBot","description":"","frontmatter":{},"headers":[{"level":2,"title":"下载SoruxBot","slug":"下载soruxbot","link":"#下载soruxbot","children":[]},{"level":2,"title":"配置SoruxBot","slug":"配置soruxbot","link":"#配置soruxbot","children":[{"level":3,"title":"启动Wrapper","slug":"启动wrapper","link":"#启动wrapper","children":[]},{"level":3,"title":"启动协议层","slug":"启动协议层","link":"#启动协议层","children":[]},{"level":3,"title":"后续启动","slug":"后续启动","link":"#后续启动","children":[]}]}],"relativePath":"use/index.md"}'),p={name:"use/index.md"},l=n(`<h1 id="使用soruxbot" tabindex="-1">使用SoruxBot <a class="header-anchor" href="#使用soruxbot" aria-hidden="true">#</a></h1><h2 id="下载soruxbot" tabindex="-1">下载SoruxBot <a class="header-anchor" href="#下载soruxbot" aria-hidden="true">#</a></h2><p>首先，我们需要在项目地址下载<a href="https://github.com/liaosunny123/SoruxBot" target="_blank" rel="noreferrer">SoruxBot</a>。</p><p>SoruxBot分为若干组件，本文仅以内置组件为例，我们需要下载一个Wrapper用于运行SoruxBot的核心程序，此外，我们需要下载任意我们喜欢的Provider作为我们需要给插件提供沟通的聊天平台。</p><p>如果Provider不具有协议功能，那么需要下载对应的协议层实体对象。</p><p>例如，我们需要组建一个QQ平台的聊天机器人在Windows上面使用，那么我们需要下载：</p><ul><li><a href="https://github.com/liaosunny123/SoruxBot/releases/download/v1.0.1/Wrapper-v1.0.1-Windows.zip" target="_blank" rel="noreferrer">Wrapper-v1.0.1-Windows.zip</a></li><li><a href="https://github.com/liaosunny123/SoruxBot/releases/download/v1.0.1/Provider.Cqhttp.v1.0.1-Windows.zip" target="_blank" rel="noreferrer">Provider.Cqhttp.v1.0.1-Windows.zip</a></li><li><a href="https://github.com/Mrs4s/go-cqhttp/releases/download/v1.0.0-rc4/go-cqhttp_windows_386.exe" target="_blank" rel="noreferrer">go-cqhttp_windows_386.exe</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>下载go-cqhttp是因为Provider.Cqhttp需要使用go-cqhttp作为协议层实体，你可以根据Provider的描述判断是否需要只下载一个Provider</p></div><h2 id="配置soruxbot" tabindex="-1">配置SoruxBot <a class="header-anchor" href="#配置soruxbot" aria-hidden="true">#</a></h2><h3 id="启动wrapper" tabindex="-1">启动Wrapper <a class="header-anchor" href="#启动wrapper" aria-hidden="true">#</a></h3><p>将Wrapper放在任意一个文件夹中，并且运行EXE文件，等待Wrapper输出完基本信息后关闭Wrapper，此时你会发现你的文件夹中多了一些内容，自此完成了Wrapper的初始化。</p><p>下面应该是你多出的文件夹：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">├─Config</span></span>
<span class="line"><span style="color:#FFCB6B;">├─Lib</span></span>
<span class="line"><span style="color:#FFCB6B;">├─Logs</span></span>
<span class="line"><span style="color:#FFCB6B;">├─Plugins</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">├─Bin</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">├─Config</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">└─Data</span></span>
<span class="line"></span></code></pre></div><p>然后，我们再次运行EXE文件，打开Wrapper，自此Wrapper完成了启动。</p><h3 id="启动协议层" tabindex="-1">启动协议层 <a class="header-anchor" href="#启动协议层" aria-hidden="true">#</a></h3><p>我们将Provider放在另一个文件夹中，并运行EXE文件，注意，你需要对Provider进行配置。 在Provider的运行目录下新建<code>appsettings.json</code>的文件，并且配置一下内容：</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">Logging</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">LogLevel</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">Default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Information</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">Microsoft.AspNetCore</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Warning</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">AllowedHosts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">gRPCHost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:7151</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">GoCqHost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:5700/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">urls</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://localhost:7290</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>其中最后一个表示的是Provider的监听地址，你需要保证这个地址与Wrapper的BotConfiguration.xml中的ProviderItem.HttpPostJsonPath一致。</p><p>其中gRPCHost需要被保证与xml文件中的WebLister中给定的地址和端口一致。</p><p>然后运行go-cqhttp.exe文件，根据提示输入账号密码并登录。登录后更改config.yml配置，使得appsettings.json中的GoCqHost与go-cqhttp的config.yml中的http.address相同，并和xml中的ProviderItem.NetWorkHttpPostPath相同。</p><p>此外，你需要取消config.yml中反向HTTP POST的注释，并保证url与appsettings.json中的urls相同。</p><p>最后，你需要将go-cqhttp中的消息模式更改为string，而不是array，至此完成了配置。</p><h3 id="后续启动" tabindex="-1">后续启动 <a class="header-anchor" href="#后续启动" aria-hidden="true">#</a></h3><p>你只需要把插件放入Wrapper的Plugins中Bin目录下，并将对应的Json放在Config文件夹下即可。</p><p>后续启动时，你可以按照Wrapper-Provider-gocqhttp的方式，依次启动三个程序即可。</p>`,25),e=[l];function t(r,c,i,D,F,y){return o(),a("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
